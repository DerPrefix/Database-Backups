USE App_Nicklas;
DROP TABLE IF EXISTS Code_NotenApp;
CREATE TABLE Code_NotenApp (
code VARCHAR(255));
INSERT INTO Code_NotenApp VALUES ('import tkinter as tk\r\nimport tkinter.simpledialog as simpledialog\r\nimport json\r\nimport requests\r\nimport pygame\r\nimport subprocess\r\nimport mysql.connector\r\nimport sys\r\nfrom tkinter import messagebox\r\nimport socket\r\nfrom pathlib import Path\r\nimport datetime\r\nimport schedule\r\nimport webbrowser\r\nfrom PIL import ImageTk, Image\r\n\r\n\r\nimport time\r\nimport os\r\nimport random\r\nfrom tkinter import *\r\nimport asyncio\r\nimport PySimpleGUI as sg\r\nfrom random import randint\r\nfrom  time import time\r\nimport threading\r\nimport qrcode\r\nimport matplotlib.pyplot as plt\r\n\r\n\r\n\r\ndef check_for_lizenz():\r\n    with open("lizenz.txt", "r") as file:\r\n        lizenz = file.read()\r\n\r\n        db = mysql.connector.connect(\r\n                host="database.snbz.services",\r\n                user="Nicklas-Public",\r\n                password="E5$03tb@5k?vfZc#xsB",\r\n                database="App_Nicklas",\r\n                port="3306"\r\n            )\r\n        \r\n        cursor = db.cursor()\r\n        cursor.execute("SELECT * FROM Lizenzen")\r\n        result = cursor.fetchall()\r\n\r\n        if lizenz in [r[0] for r in result]:\r\n            return True\r\n        else:\r\n            print("Lizenz ist ungültig!")\r\n\r\nif "lizenz.txt" not in os.listdir():\r\n    with open("lizenz.txt", "w") as file:\r\n        file.write("Lizenz ist ungueltig!")\r\n\r\n\r\n            \r\n\r\n            \r\n            \r\n                \r\n                \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass Application(tk.Frame):\r\n    def __init__(self, master=None):\r\n        super().__init__(master)\r\n        self.master = master\r\n        self.master.title("Notenprogramm")\r\n        self.master.geometry("470x400")\r\n        self.create_widgets()\r\n        self.grades = {}\r\n        self.load_grades()   \r\n        self.create_widgets()\r\n        self.update_subject_listbox()\r\n        check_for_lizenz()\r\n        \r\n\r\n    def upload_edit_grades():\r\n        with open("lizenz.txt", "r") as file:\r\n            lizenz = file.read()\r\n\r\n            db = mysql.connector.connect(\r\n                host="database.snbz.services",\r\n                user="Nicklas-Public",\r\n                password="E5$03tb@5k?vfZc#xsB",\r\n                database="App_Nicklas",\r\n                port="3306")\r\n                \r\n            cursor = db.cursor()\r\n            cursor.execute("SELECT * FROM Lizenzen")\r\n            result = cursor.fetchall()\r\n\r\n            # Überprüfen, ob die Lizenz in der Datenbank vorhanden ist\r\n            if lizenz not in [r[0] for r in result]:\r\n                msg = messagebox.showerror("Lizenz", "Du hast keine Lizenz!\\nMeld dich bei Nicklas!")\r\n\r\n            # Daten in die Datenbank hochladen\r\n            with open("grades.json", "r") as file:\r\n                grades = file.read()\r\n\r\n            # Daten in die Datenbank hochladen\r\n            try:\r\n                cursor.execute("INSERT INTO Lizenzen (Lizenz, Note) VALUES (%s, %s)", (lizenz, grades))\r\n                #msg = messagebox.showinfo("Datenbank", "Die Noten wurden hochgeladen!")\r\n                db.commit()\r\n            except mysql.connector.errors.IntegrityError as e:\r\n                cursor.execute("UPDATE Lizenzen SET Note = %s WHERE Lizenz = %s", (grades, lizenz))\r\n                #msg = messagebox.showinfo("Datenbank", "Die Noten wurden hochgeladen! 2")\r\n\r\n            with open("timestamp.txt", "w") as file:\r\n                \r\n                # reinschreiben wann die noten heruntergeladen wurden\r\n                timestamp = datetime.datetime.now().strftime("%d.%m %H:%M:%S")\r\n                file.write(timestamp)\r\n\r\n    def add_license(self):\r\n\r\n        lizenz = simpledialog.askstring("Lizenz", "Bitte gib deine Lizenz ein:")\r\n\r\n        # Prüfen, ob die lizenz in der Datenbank vorhanden ist\r\n        if lizenz:\r\n            db = mysql.connector.connect(\r\n                host="database.snbz.services",\r\n                user="Nicklas-Public",\r\n                password="E5$03tb@5k?vfZc#xsB",\r\n                database="App_Nicklas",\r\n                port="3306"\r\n            )\r\n        \r\n            cursor = db.cursor()\r\n            cursor.execute("SELECT * FROM Lizenzen")\r\n            result = cursor.fetchall()\r\n\r\n            if lizenz in [r[0] for r in result]:\r\n                    \r\n                    with open("lizenz.txt", "w") as file:\r\n                        file.write(lizenz)\r\n\r\n\r\n                    msg = messagebox.showinfo("Lizenz", "Lizenz wurde hinzugefügt!")\r\n                    self.add_license_button.destroy()\r\n                    self.timetable_button = tk.Button(self, text="Stundenplan öffnen", command=self.open_timetable)\r\n                    self.timetable_button.grid(row=6, column=0, columnspan=2, padx=10, pady=10)\r\n\r\n                        \r\n\r\n                    \r\n                    \r\n                    return True\r\n            else:\r\n                msg = messagebox.showerror("Lizenz", "Lizenz ist ungültig!")\r\n                return False\r\n    \r\n    def download_sort_png(self):\r\n        # download the sort.png image\r\n        url = "https://drive.google.com/uc?export=download&id=1Hn-UaCxhXe6XVysftqR_UfrvKPO5WNzG"\r\n        r = requests.get(url, allow_redirects=True)\r\n        open(\'images/sort.png\', \'wb\').write(r.content)\r\n\r\n    def download_patchnotes_png(self):\r\n        # download the patchnotes.png image\r\n        url = "https://drive.google.com/uc?export=download&id=1cyG760ugBtBsu53JzPqLhjjsNcBxXAqz"\r\n        r = requests.get(url, allow_redirects=True)\r\n        open(\'images/patchnotes.png\', \'wb\').write(r.content)\r\n\r\n\r\n    # Beim Start sollen die noten abgeglichen werden\r\n    \r\n\r\n    def patch_notes(self):\r\n        db = mysql.connector.connect(\r\n                host="database.snbz.services",\r\n                user="Nicklas-Public",\r\n                password="E5$03tb@5k?vfZc#xsB",\r\n                database="App_Nicklas",\r\n                port="3306"\r\n            )\r\n        \r\n        cursor = db.cursor()\r\n        cursor.execute("SELECT * FROM Patchnotes")\r\n        result = cursor.fetchall()\r\n        \r\n        try:\r\n            patchnotes = result[0][0]\r\n            msg = messagebox.showinfo("Patchnotes", patchnotes)\r\n        except:\r\n            msg = messagebox.showerror("Patchnotes", "Es sind keine Patchnotes vorhanden!")\r\n\r\n    def select_lizenz(self, event):\r\n        if self.lizenzen_listbox.curselection():\r\n            lizenz = self.lizenzen_listbox.get(self.lizenzen_listbox.curselection())\r\n            \r\n    def select_noten(self, event):\r\n        if self.noten_listbox.curselection():\r\n            note = self.noten_listbox.get(self.noten_listbox.curselection())\r\n\r\n    def remove_lizenz(self):\r\n        # remove the selected lizenz\r\n        selected_lizenz = self.lizenzen_listbox.get(self.lizenzen_listbox.curselection())\r\n        if messagebox.askquestion("Lizenz entfernen", f"Möchtest du die Lizenz \'{selected_lizenz}\' wirklich entfernen?") == "yes":\r\n            db = mysql.connector.connect(\r\n                host="database.snbz.services",\r\n                user="Nicklas-Public",\r\n                password="E5$03tb@5k?vfZc#xsB",\r\n                database="App_Nicklas",\r\n                port="3306"\r\n            )\r\n        \r\n            cursor = db.cursor()\r\n            cursor.execute("DELETE FROM Lizenzen WHERE Lizenz = %s", (selected_lizenz,))\r\n            db.commit()\r\n            self.lizenzen_listbox.delete(self.lizenzen_listbox.curselection())\r\n            # remove the name from the right listbox\r\n            msg = messagebox.showinfo("Lizenz", "Lizenz wurde entfernt!")\r\n\r\n    def create_lizenz(self):\r\n        # create a new lizenz\r\n        lizenz = simpledialog.askstring("Lizenz", "Bitte gib eine Lizenz ein:")\r\n        name = simpledialog.askstring("Lizenz", "Bitte gib einen Namen ein:")\r\n\r\n        if lizenz and name:\r\n            db = mysql.connector.connect(\r\n                host="database.snbz.services",\r\n                user="Nicklas-Public",\r\n                password="E5$03tb@5k?vfZc#xsB",\r\n                database="App_Nicklas",\r\n                port="3306"\r\n            )\r\n        \r\n            cursor = db.cursor()\r\n            cursor.execute("SELECT * FROM Lizenzen")\r\n            result = cursor.fetchall()\r\n\r\n            if lizenz in [r[0] for r in result]:\r\n                msg = messagebox.showerror("Lizenz", "Lizenz ist bereits vorhanden!")\r\n                return False\r\n            else:\r\n                cursor.execute("INSERT INTO Lizenzen (Lizenz, User, Note) VALUES (%s, %s, %s)", (lizenz, name, "{}"))\r\n                db.commit()\r\n                self.lizenzen_listbox.insert(tk.END, lizenz)\r\n                msg = messagebox.showinfo("Lizenz", "Lizenz wurde erstellt!")\r\n                return True\r\n\r\n    def handle_right_click2(self, event):\r\n        # Prüfen, ob ein Element in der Listbox ausgewählt ist\r\n        if self.lizenzen_listbox.curselection():\r\n            selected_lizenz = self.lizenzen_listbox.get(self.lizenzen_listbox.curselection())\r\n\r\n            # Kontextmenü erstellen\r\n            context_menu = tk.Menu(self, tearoff=0)\r\n            context_menu.add_command(label="Lizenz entfernen", command=lambda: self.remove_lizenz())\r\n            context_menu.add_command(label="Lizenz hinzufügen", command=lambda: self.create_lizenz())\r\n            context_menu.post(event.x_root, event.y_root)\r\n            \r\n\r\n\r\n    def admin_menu(self):\r\n        # Lade alle Lizenzen aus der Datenbank\r\n        db = mysql.connector.connect(\r\n                host="database.snbz.services",\r\n                user="Nicklas-Public",\r\n                password="E5$03tb@5k?vfZc#xsB",\r\n                database="App_Nicklas",\r\n                port="3306"\r\n            )\r\n        \r\n        cursor = db.cursor()\r\n        cursor.execute("SELECT * FROM Lizenzen")\r\n        result = cursor.fetchall()\r\n\r\n        # Lade alle Lizenen in eine Liste\r\n\r\n        lizenzen = [r[0] for r in result]\r\n\r\n        # Lade alle Noten in eine Liste\r\n\r\n        user = [r[1] for r in result]\r\n\r\n        \r\n        # show the admin menu\r\n        try:\r\n            self.admin_menu_window.lift()\r\n            return\r\n        except:\r\n            pass\r\n        self.admin_menu_window = tk.Toplevel(self.master)\r\n        self.admin_menu_window.title("Admin Menü")\r\n        self.admin_menu_window.geometry("500x500")\r\n        #self.admin_menu_window.iconbitmap("images/admin.ico")\r\n        self.admin_menu_window.resizable(False, False)\r\n\r\n        # show the listbox with all the lizenzen\r\n        self.lizenzen_listbox = tk.Listbox(self.admin_menu_window, font=("Arial", 13), selectmode=tk.SINGLE)\r\n        self.lizenzen_listbox.place(x=0, y=0, width=250, height=500, anchor="nw")\r\n\r\n        \r\n\r\n        self.lizenzen_listbox.bind("<<ListboxSelect>>", self.select_lizenz)\r\n        self.lizenzen_listbox.bind("<Button-3>", self.handle_right_click2)\r\n        \r\n\r\n        self.lizenzen_listbox.insert(tk.END, *lizenzen)\r\n\r\n        # show the listbox with all the noten\r\n        self.noten_listbox = tk.Listbox(self.admin_menu_window, font=("Arial", 13), selectmode=tk.SINGLE)\r\n        self.noten_listbox.place(x=250, y=0, width=250, height=500, anchor="nw")\r\n\r\n        self.noten_listbox.bind("<<ListboxSelect>>", self.select_noten)\r\n\r\n        self.noten_listbox.insert(tk.END, *user)\r\n\r\n        # show the button to delete the lizenz\r\n\r\n\r\n\r\n    def create_widgets(self):\r\n        self.master.lift()\r\n        \r\n        # show the strich.png image\r\n        strich=PhotoImage(file=\'images/strich.png\')\r\n        strich_label=Label(self.master, image=strich)\r\n        strich_label.image=strich\r\n        strich_label.place(x=0, y=140, relwidth=1, relheight=1)\r\n\r\n        plan=PhotoImage(file=\'images/plan.png\')\r\n        image_st_1 = tk.Button(self.master, image=plan, font=("Arial", 15), bd=0, relief="raised", command=self.open_timetable)\r\n        image_st_1.image = plan\r\n        image_st_1.place(x=0, y=343)\r\n        \r\n        extras=PhotoImage(file=\'images/extras.png\')\r\n        image_st_2 = tk.Button(self.master, image=extras, font=("Arial", 15), bd=0, relief="raised",command=self.open_settings)\r\n        image_st_2.image = extras\r\n        image_st_2.place(x=414, y=343)\r\n\r\n\r\n\r\n        try:\r\n            sortiernach=PhotoImage(file=\'images/sort.png\')\r\n            image_st_3 = tk.Button(self.master, image=sortiernach, font=("Arial", 15), bd=0 ,relief="raised", command=self.sort_subjects)\r\n            image_st_3.image = sortiernach\r\n            image_st_3.place(x=433, y=5)\r\n        except:\r\n            msg = messagebox.showerror("Update", "Bitte war ein paar Sekunden, bis das Update heruntergeladen wurde!")\r\n\r\n            self.download_sort_png()\r\n            sortiernach=PhotoImage(file=\'images/sort.png\')\r\n            image_st_3 = tk.Button(self.master, image=sortiernach, font=("Arial", 15), bd=0 ,relief="raised", command=self.sort_subjects)\r\n            image_st_3.image = sortiernach\r\n            image_st_3.place(x=433, y=5)\r\n\r\n\r\n        try:\r\n            patchnotes=PhotoImage(file=\'images/patchnotes.png\')\r\n            image_st_4 = tk.Button(self.master, image=patchnotes, font=("Arial", 15), bd=0 ,relief="raised", command=self.patch_notes)\r\n            image_st_4.image = patchnotes\r\n            image_st_4.place(x=435, y=305)\r\n        except:\r\n            msg = messagebox.showerror("Update", "Bitte war ein paar Sekunden, bis das Update heruntergeladen wurde!")\r\n\r\n            self.download_patchnotes_png()\r\n            patchnotes=PhotoImage(file=\'images/patchnotes.png\')\r\n            image_st_4 = tk.Button(self.master, image=patchnotes, font=("Arial", 15), bd=0 ,relief="raised", command=self.patch_notes)\r\n            image_st_4.image = patchnotes\r\n            image_st_4.place(x=300, y=343)\r\n\r\n            \r\n\r\n\r\n\r\n        developer_text = "Entwickelt von: Nicklas"\r\n        developer_label = tk.Label(self.master, text=developer_text, font=("Arial", 10))\r\n        developer_label.place(x=0, y=310)\r\n\r\n        with open("timestamp.txt", "r") as file:\r\n            timestamp = file.read()\r\n        sync_status = f"Zuletzt synchronisiert: {timestamp}"\r\n        sync_status = tk.Label(self.master, text=sync_status, font=("Arial", 10))\r\n        sync_status.place(x=210, y=310)\r\n\r\n        with open("lizenz.txt", "r") as file:\r\n            lizenz = file.read()\r\n\r\n            if lizenz == "3C7S6DLR7QJ":\r\n                self.add_license_button = tk.Button(self.master, text="Admin Menü öffnen", bd=0, relief="raised",command=self.admin_menu)\r\n                self.add_license_button.place(x=0, y=280)\r\n\r\n\r\n        \r\n\r\n                \r\n        \r\n\r\n    \r\n\r\n        \r\n\r\n\r\n        ################## Noten ##################\r\n\r\n        self.subject_label = tk.Label(self.master, text="Fach:", font=("Arial", 15))\r\n        self.subject_label.place(x=3, y=10)\r\n\r\n        self.subject_entry = tk.Entry(self.master, font=("Arial", 13))\r\n        self.subject_entry.place(x=80, y=10)\r\n\r\n        self.grade_label = tk.Label(self.master, text="Note:", font=("Arial", 15))\r\n        self.grade_label.place(x=3, y=50)\r\n\r\n        self.grade_entry = tk.Entry(self.master, font=("Arial", 13))\r\n        self.grade_entry.place(x=80, y=50)\r\n\r\n        self.save_button = tk.Button(self.master, text="Note speichern", font=("Arial", 15),bg="green", command=self.save_grade)\r\n        self.save_button.place(x=50, y=90)\r\n\r\n        self.result_label = tk.Label(self.master, text="", font=("Arial", 12))\r\n        self.result_label.place(x=30, y=160)\r\n\r\n        self.subject_listbox = tk.Listbox(self.master, font=("Arial", 13), selectmode=tk.SINGLE)\r\n        self.subject_listbox.place(x=280, y=10, width=150, height=300, anchor="nw")\r\n\r\n        self.subject_listbox.bind("<<ListboxSelect>>", self.select_subject)\r\n        self.subject_listbox.bind("<Button-3>", self.handle_right_click)\r\n\r\n        #self.update_subject_listbox()\r\n\r\n    \r\n        \r\n    \r\n    def handle_right_click(self, event):\r\n        # Prüfen, ob ein Element in der Listbox ausgewählt ist\r\n        if self.subject_listbox.curselection():\r\n            selected_subject = self.subject_listbox.get(self.subject_listbox.curselection())\r\n\r\n            # Kontextmenü erstellen\r\n            context_menu = tk.Menu(self, tearoff=0)\r\n            context_menu.add_command(label="Noten anzeigen", command=lambda: self.show_grades())\r\n            context_menu.add_separator()\r\n            context_menu.add_command(label="Noten entfernen", command=lambda: self.remove_grade())\r\n            context_menu.add_separator()\r\n            context_menu.add_command(label="Fach bearbeiten", command=lambda: self.edit_subject(selected_subject))\r\n            context_menu.add_separator()\r\n            context_menu.add_command(label="Fach löschen", command=lambda: self.delete_subject(selected_subject))\r\n            \r\n\r\n    \r\n            \r\n            \r\n\r\n            \r\n            \r\n\r\n            # Position des Kontextmenüs anzeigen\r\n            context_menu.post(event.x_root, event.y_root)\r\n\r\n    def edit_subject(self, subject):\r\n        # bearbeitetes Fach abfragen\r\n        new_subject = simpledialog.askstring("Fach bearbeiten", "Wie soll das Fach heißen?", initialvalue=subject)\r\n\r\n        # Prüfen, ob ein Fach eingegeben wurde\r\n        if new_subject:\r\n            # Prüfen, ob das Fach bereits vorhanden ist\r\n            if new_subject in self.grades:\r\n                messagebox.showerror("Fach bereits vorhanden", f"Das Fach \'{new_subject}\' ist bereits vorhanden.")\r\n            else:\r\n                # Fach umbenennen\r\n                self.grades[new_subject] = self.grades[subject]\r\n                del self.grades[subject]\r\n                self.update_subject_listbox()\r\n                self.save_grades()#\r\n\r\n                self.upload_edit_grades()\r\n                sync_status = f"Zuletzt synchronisiert: {datetime.datetime.now().strftime(\'%d.%m %H:%M:%S\')}"\r\n                sync_status = tk.Label(self.master, text=sync_status, font=("Arial", 10))\r\n                sync_status.place(x=210, y=310)\r\n\r\n    def show_grades(self):\r\n        # Das Fach was ausgewählt ist\r\n        selected_subject = self.subject_listbox.get(self.subject_listbox.curselection())\r\n\r\n        # Noten für das Fach abfragen\r\n        subject_grades = self.grades[selected_subject]\r\n\r\n        # Noten in einem String zusammenfügen\r\n        grades_string = ", ".join([str(grade) for grade in subject_grades])\r\n\r\n        # Noten anzeigen\r\n        messagebox.showinfo(f"{selected_subject}", grades_string)\r\n\r\n        pass\r\n\r\n    def delete_subject(self, subject):\r\n        # Bestätigungsmeldung anzeigen\r\n        if messagebox.askyesno("Fach löschen", f"Möchtest du das Fach \'{subject}\' wirklich löschen?"):\r\n            # Fach aus dem Dictionary entfernen\r\n            del self.grades[subject]\r\n            # Listbox aktualisieren\r\n            self.update_subject_listbox()\r\n            self.subject_entry.delete(0, tk.END)\r\n            # Speichern der Änderungen\r\n            self.save_grades()\r\n\r\n            self.upload_edit_grades()\r\n            sync_status = f"Zuletzt synchronisiert: {datetime.datetime.now().strftime(\'%d.%m %H:%M:%S\')}"\r\n            sync_status = tk.Label(self.master, text=sync_status, font=("Arial", 10))\r\n            sync_status.place(x=210, y=310)\r\n            \r\n\r\n\r\n\r\n    def load_grades(self):\r\n        try:\r\n            with open("grades.json", "r") as file:\r\n                self.grades = json.load(file)\r\n        except FileNotFoundError:\r\n            pass\r\n\r\n    \r\n\r\n    def save_grades(self):\r\n        with open("grades.json", "w") as file:\r\n            json.dump(self.grades, file)\r\n\r\n        db = mysql.connector.connect(\r\n                host="database.snbz.services",\r\n                user="Nicklas-Public",\r\n                password="E5$03tb@5k?vfZc#xsB",\r\n                database="App_Nicklas",\r\n                port="3306"\r\n            )\r\n        \r\n\r\n        cursor = db.cursor()\r\n\r\n        with open("lizenz.txt", "r") as file:\r\n            lizenz = file.read()\r\n\r\n        # Er soll die grades.json so wie sie ist hochladen\r\n        with open("grades.json", "r") as file:\r\n            grades = file.read()\r\n\r\n            # Daten in die Datenbank hochladen\r\n        try:\r\n            cursor.execute("INSERT INTO Lizenzen (Lizenz, Note) VALUES (%s, %s)", (lizenz, grades))\r\n            \r\n            db.commit()\r\n        except mysql.connector.errors.IntegrityError as e:\r\n            if e.errno == mysql.connector.errorcode.ER_DUP_ENTRY:\r\n                cursor.execute("UPDATE Lizenzen SET Note = %s WHERE Lizenz = %s", (grades, lizenz))\r\n                \r\n                db.commit()\r\n            else:\r\n                raise e\r\n\r\n\r\n     \r\n\r\n\r\n            \r\n\r\n    def remove_grade(self):\r\n        # Das Fach was ausgewählt ist\r\n        selected_subject = self.subject_listbox.get(self.subject_listbox.curselection())\r\n\r\n        # Noten für das Fach abfragen\r\n        subject_grades = self.grades[selected_subject]\r\n\r\n        # Noten in einem String zusammenfügen\r\n        grades_string = ", ".join([str(grade) for grade in subject_grades])\r\n\r\n        # Noten anzeigen\r\n        grade = simpledialog.askstring("Noten entfernen", f"Welche Note möchtest du entfernen?\\n\\nNoten: {grades_string}")\r\n        if grade:\r\n            try:\r\n                # Note in ein float umwandeln\r\n                grade = float(grade)\r\n\r\n                # Note aus dem Fach entfernen\r\n                self.grades[selected_subject].remove(grade)\r\n\r\n                # Speichern der Änderungen\r\n                self.save_grades()\r\n\r\n                # Noten aktualisieren\r\n                self.calculate_average()\r\n\r\n                if not self.grades[selected_subject]:\r\n                    self.delete_subject(selected_subject)\r\n\r\n                # Listbox aktualisieren\r\n                self.update_subject_listbox()\r\n\r\n\r\n\r\n            except ValueError:\r\n                messagebox.showerror("Ungültige Eingabe", "Bitte gib eine gültige Note ein.")\r\n     \r\n\r\n    def save_grade(self):\r\n        try:\r\n            # Get the subject and grade from the entry fields\r\n            subject = self.subject_entry.get()\r\n            grade = float(self.grade_entry.get())\r\n\r\n            ## if grade is not between 1 and 6, raise ValueError\r\n            if grade < 1 or grade > 6:\r\n                raise ValueError\r\n\r\n            # Save the grade to the dictionary\r\n            if subject in self.grades:\r\n                self.grades[subject].append(grade)\r\n            else:\r\n                self.grades[subject] = [grade]\r\n\r\n            # Clear the entry fields\r\n            #self.subject_entry.delete(0, tk.END)\r\n            self.grade_entry.delete(0, tk.END)\r\n\r\n            # Save the updated grades to the JSON file\r\n            self.save_grades()\r\n\r\n            \r\n\r\n            # Update subject listbox\r\n            self.update_subject_listbox()\r\n\r\n            # Emojis springen nach dem Speichern auf\r\n            if grade == 1:\r\n                self.result_label.config(text="Sehr gut, weiter so! ?", fg="green")\r\n            elif grade == 2:\r\n                self.result_label.config(text="Gut, weiter so! ?", fg="green")\r\n            elif grade == 3:\r\n                self.result_label.config(text="Nicht schlecht, weiter so! ?", fg="green")\r\n            elif grade == 4:\r\n                self.result_label.config(text="Naja, das geht besser! ?", fg="orange")\r\n            elif grade == 5:\r\n                self.result_label.config(text="Schlecht, das muss besser werden! ?", fg="orange")\r\n            elif grade == 6:\r\n                self.result_label.config(text="Sehr schlecht, das muss besser werden! ?", fg="red")\r\n                \r\n                \r\n               \r\n                                \r\n                \r\n\r\n        except ValueError:\r\n            self.result_label.config(text="Ungültige Eingabe")\r\n\r\n    \r\n\r\n    def calculate_average(self):\r\n        subject = self.subject_entry.get()\r\n        \r\n        if subject in self.grades:\r\n            subject_grades = self.grades[subject]\r\n\r\n            if subject_grades:\r\n                # Calculate the average grade for the subject\r\n                average = sum(subject_grades) / len(subject_grades)\r\n\r\n                # Display the result\r\n                self.result_label.config(text=f"Aktueller Durchschnitt für {subject}:\\n {average:.2f}")\r\n\r\n                if average >= 5:\r\n                    # pack den tipps button aus\r\n                    msg = messagebox.showwarning("Schlechte Noten", "Du hast schlechte Noten!\\n\\nKlicke auf den Button \'Extras\', um Tipps zu bekommen!")\r\n\r\n                # Send webhook notification\r\n                \r\n\r\n            else:\r\n                self.result_label.config(text=f"Keine Noten für {subject} vorhanden")\r\n\r\n        else:\r\n            self.result_label.config(text=f"Keine Noten vorhanden")\r\n\r\n    def select_subject(self, event):\r\n        if self.subject_listbox.curselection():\r\n            grade = self.grades[self.subject_listbox.get(self.subject_listbox.curselection())][-1]\r\n            selected_subject = self.subject_listbox.get(self.subject_listbox.curselection())\r\n            self.subject_entry.delete(0, tk.END)\r\n            self.subject_entry.insert(0, selected_subject)\r\n            self.calculate_average()\r\n\r\n    def update_subject_listbox(self):\r\n        self.subject_listbox.delete(0, tk.END)\r\n        self.subject_listbox.insert(tk.END, *self.grades.keys())\r\n\r\n\r\n\r\n    def close_window(self):\r\n        # Get a pop up window to confirm\r\n        if tk.messagebox.askokcancel("Beenden", "Willst du das Programm wirklich beenden?"):\r\n            self.master.destroy()\r\n\r\n    def open_qr_codes(self):\r\n        # open the folder qr codes\r\n        if not os.path.exists(\'qrcodes\'):\r\n            msg = messagebox.showerror("Ordner wurde erstellt", "Es wurden noch keine QR-Codes erstellt!")\r\n            os.makedirs(\'qrcodes\')\r\n        self.master.lift()\r\n        os.system("start qrcodes")\r\n\r\n\r\n    def check_for_bad_grades(self):\r\n       # ein neues fenster öffnen\r\n        try:\r\n            self.tips_window.lift()\r\n            return\r\n        except:\r\n            pass\r\n        self.tips_window = tk.Toplevel(self.master)\r\n        self.tips_window.title("Tipps")\r\n        self.tips_window.geometry("500x500")\r\n        self.tips_window.iconbitmap("images/tipps.ico")\r\n\r\n        # Zeige hier die fächer an, die schlechter als 3 sind\r\n        for subject, grades in self.grades.items():\r\n            average = sum(grades) / len(grades)\r\n            if average >= 3.5:\r\n    \r\n                #überschrift ist das fach\r\n                self.subject_label = tk.Label(self.tips_window, text=subject, font=("Arial", 20, "bold"))        \r\n                self.subject_label.pack()\r\n                \r\n                # wenn schlechter als 5, dann mach den durchschnitt rot\r\n                if average >= 5:\r\n                    self.grade_label = tk.Label(self.tips_window, text=f"Durchschnitt: {average:.2f}", font=("Arial", 15), fg="red")\r\n                    self.grade_label.pack()\r\n                    \r\n                    \r\n                elif average >= 3.5:\r\n                    self.grade_label = tk.Label(self.tips_window, text=f"Durchschnitt: {average:.2f}", font=("Arial", 15), fg="orange")\r\n                    self.grade_label.pack()\r\n\r\n                \r\n       \r\n                    #self.grade_label = tk.Label(self.tips_window, text=f"Du brauchst noch {3 - average:.2f} Noten bis zur 3!", font=("Arial", 15), fg="orange")\r\n                    #self.grade_label.pack()\r\n                \r\n\r\n            \r\n\r\n                self.subject_label = tk.Label(self.tips_window, text="_______________________________________________________")\r\n                self.subject_label.pack()\r\n\r\n            \r\n\r\n\r\n\r\n    def open_vertretungsplan(self):\r\n        # open the vertretungsplan\r\n        self.master.lift()\r\n        os.system("start https://sekgern.edupage.org/substitution/")\r\n                \r\n\r\n    def upload_to_database(self):\r\n        # Lade die Lizenz aus der "lizenz.txt"-Datei\r\n\r\n        if messagebox.askquestion("Upload", "Willst du wirklich deine Noten hochladen?\\n\\n") == "no":\r\n            return\r\n        \r\n        else:\r\n\r\n            with open("lizenz.txt", "r") as file:\r\n                lizenz = file.read()\r\n\r\n            # Verbindung zur MySQL-Datenbank herstellen\r\n            db = mysql.connector.connect(\r\n                host="database.snbz.services",\r\n                user="Nicklas-Public",\r\n                password="E5$03tb@5k?vfZc#xsB",\r\n                database="App_Nicklas",\r\n                port="3306")\r\n\r\n            cursor = db.cursor()\r\n\r\n            # Überprüfen, ob die Lizenz in der Datenbank vorhanden ist\r\n            cursor.execute("SELECT * FROM Lizenzen WHERE Lizenz = %s", (lizenz,))\r\n            result = cursor.fetchone()\r\n\r\n            if result is None:\r\n                msg = messagebox.showerror("Lizenz", "Du hast keine gültige Lizenz!\\nMeld dich bei Nicklas!")\r\n                return\r\n\r\n            # Er soll die grades.json so wie sie ist hochladen\r\n            with open("grades.json", "r") as file:\r\n                grades = file.read()\r\n\r\n            # Daten in die Datenbank hochladen\r\n            try:\r\n                cursor.execute("INSERT INTO Lizenzen (Lizenz, Note) VALUES (%s, %s)", (lizenz, grades))\r\n                msg = messagebox.showinfo("Datenbank", "Die Noten wurden hochgeladen!")\r\n                db.commit()\r\n            except mysql.connector.errors.IntegrityError as e:\r\n                if e.errno == mysql.connector.errorcode.ER_DUP_ENTRY:\r\n                    cursor.execute("UPDATE Lizenzen SET Note = %s WHERE Lizenz = %s", (grades, lizenz))\r\n                    msg = messagebox.showinfo("Datenbank", "Die Noten wurden hochgeladen!")\r\n                    db.commit()\r\n                else:\r\n                    raise e\r\n\r\n\r\n    def download_from_database(self):\r\n        # Lade die Lizenz aus der "lizenz.txt"-Datei\r\n\r\n        if messagebox.askquestion("Upload", "Willst du wirklich deine Noten herunterladen?\\n\\nMöglicherweise gehen Daten verloren") == "no":\r\n            return\r\n        \r\n        else:\r\n\r\n            with open("lizenz.txt", "r") as file:\r\n                lizenz = file.read()\r\n                \r\n\r\n            # Verbindung zur MySQL-Datenbank herstellen\r\n            db = mysql.connector.connect(\r\n                host="database.snbz.services",\r\n                user="Nicklas-Public",\r\n                password="E5$03tb@5k?vfZc#xsB",\r\n                database="App_Nicklas",\r\n                port="3306")\r\n\r\n            cursor = db.cursor()\r\n            \r\n            # Überprüfen, ob die Lizenz in der Datenbank vorhanden ist\r\n            cursor.execute("SELECT * FROM Lizenzen WHERE Lizenz = %s", (lizenz,))\r\n            result = cursor.fetchone()\r\n            \r\n            if result is None:\r\n                msg = messagebox.showerror("Lizenz", "Du hast keine gültige Lizenz!\\nMeld dich bei Nicklas!")\r\n                return\r\n            \r\n            # Daten aus der Datenbank herunterladen\r\n            cursor.execute("SELECT Note FROM Lizenzen WHERE Lizenz = %s", (lizenz,))\r\n            result = cursor.fetchone()\r\n            grades = result[0]\r\n\r\n\r\n            # Daten in die grades.json Datei schreiben\r\n            with open("grades.json", "w") as file:\r\n                file.write(grades)\r\n\r\n\r\n        \r\n            msg = messagebox.showinfo("Datenbank", "Die Noten wurden heruntergeladen!")\r\n            self.load_grades()\r\n            self.update_subject_listbox()\r\n\r\n            #welche noten sind neu hinzugekommen?\r\n            \r\n            \r\n\r\n\r\n    def open_settings(self):\r\n        with open("lizenz.txt", "r") as file:\r\n            lizenz = file.read()\r\n\r\n            db = mysql.connector.connect(\r\n                host="database.snbz.services",\r\n                user="Nicklas-Public",\r\n                password="E5$03tb@5k?vfZc#xsB",\r\n                database="App_Nicklas",\r\n                port="3306")\r\n                \r\n            cursor = db.cursor()\r\n            cursor.execute("SELECT * FROM Lizenzen")\r\n            result = cursor.fetchall()\r\n\r\n            # Überprüfen, ob die Lizenz in der Datenbank vorhanden ist\r\n            if lizenz not in [r[0] for r in result]:\r\n                msg = messagebox.showerror("Lizenz", "Du hast keine Lizenz!\\nMeld dich bei Nicklas!")#\r\n                return\r\n            \r\n          \r\n                    \r\n                    \r\n\r\n        try:\r\n            self.settings_window.lift()\r\n            return\r\n        except:\r\n            pass\r\n        self.settings_window = tk.Toplevel(self.master)\r\n        self.settings_window.title("Extras")\r\n        self.settings_window.geometry("230x230")\r\n        self.settings_window.iconbitmap("images/einstellungen.ico")\r\n        self.settings_window.resizable(False, False)\r\n\r\n        box_image = tk.PhotoImage(file=\'images/box.png\')\r\n        box_button = tk.Label(self.settings_window, image=box_image, bd=0, relief="flat")\r\n        box_button.place(x=0, y=0)\r\n\r\n        box_button.image = box_image\r\n        \r\n\r\n        # Button to play credits\r\n        self.play_credits_button = tk.Button(self.settings_window, text="Credits", font=("Arial", 14), bg="white", fg="black", bd=0, relief="raised", command=self.play_credits)\r\n        self.play_credits_button.place(x=75, y=30)\r\n \r\n        # Button to vertretungsplan\r\n        self.vertretungsplan_button = tk.Button(self.settings_window, text="QR-Codes", font=("Arial", 14), bg="white", fg="black", bd=0, relief="raised", command=self.open_qr_codes)\r\n        self.vertretungsplan_button.place(x=57, y=80)\r\n\r\n        for subject, grades in self.grades.items():\r\n            average = sum(grades) / len(grades)\r\n            if average >= 3.5:\r\n                self.qr_codes_button = tk.Button(self.settings_window, text="Tipps", font=("Arial", 14), bg="white", fg="black", bd=0, relief="raised", command=self.check_for_bad_grades)\r\n                self.qr_codes_button.place(x=60, y=130)\r\n                break\r\n\r\n        \r\n\r\n\r\n        \r\n            \r\n                \r\n            \r\n\r\n\r\n\r\n    def snake(self):\r\n\r\n        FIELD_SIZE = 400\r\n        CELL_NUM = 10\r\n        CELL_SIZE = FIELD_SIZE / CELL_NUM\r\n\r\n        def convert_pos_to_pixel(cell):\r\n            tl = cell[0] * CELL_SIZE, cell[1] * CELL_SIZE\r\n            br = tl[0] + CELL_SIZE, tl[1] + CELL_SIZE\r\n            return tl, br\r\n \r\n        def place_apple():\r\n            apple_pos = randint(0,CELL_NUM - 1), randint(0,CELL_NUM - 1)\r\n            while apple_pos in snake_body:\r\n                apple_pos = randint(0,CELL_NUM - 1), randint(0,CELL_NUM - 1)\r\n            return apple_pos\r\n        snake_body = [(4,4),(3,4),(2,4)]\r\n        DIRECTIONS = {\'left\': (-1,0),\'right\': (1,0), \'up\':(0,1), \'down\':(0,-1)}\r\n        direction = DIRECTIONS[\'up\']\r\n        \r\n        # apple \r\n        apple_pos = place_apple()\r\n        apple_eaten = False\r\n        \r\n        sg.theme(\'Green\')\r\n        field = sg.Graph(\r\n            canvas_size = (FIELD_SIZE,FIELD_SIZE),\r\n            graph_bottom_left = (0,0),\r\n            graph_top_right = (FIELD_SIZE,FIELD_SIZE),\r\n            background_color = \'black\')\r\n        layout = [[field]]\r\n        \r\n        window = sg.Window(\'Snake\', layout,return_keyboard_events = True)\r\n        \r\n        def start_screen():\r\n            start_layout = [[sg.Text(\'Welcome to Snake!\')],\r\n                            [sg.Button(\'Start\')]]\r\n            start_window = sg.Window(\'Snake\', start_layout)\r\n            while True:\r\n                event, values = start_window.read()\r\n                if event == sg.WIN_CLOSED or event == \'Start\':\r\n                    start_window.close()\r\n                    return\r\n        \r\n        start_screen()\r\n\r\n        \r\n                \r\n\r\n        def end_screen():\r\n            end_layout = [[sg.Text(\'Game Over\')],\r\n                            [sg.Button(\'Exit\')],\r\n                            [sg.Button(\'Restart\')]]\r\n            end_window = sg.Window(\'Snake\', end_layout)\r\n            while True:\r\n                event, values = end_window.read()\r\n                if event == sg.WIN_CLOSED or event == \'Exit\':\r\n                    end_window.close()\r\n                    # close game window\r\n                    window.close()\r\n                    return\r\n\r\n                if event == \'Restart\':\r\n                    end_window.close()\r\n                    self.snake()\r\n                    return\r\n                \r\n\r\n        \r\n\r\n        \r\n        \r\n        start_time = time()\r\n        while True:\r\n            event, values = window.read(timeout = 10)\r\n            if event == sg.WIN_CLOSED: break\r\n            if event == \'Left:37\': direction = DIRECTIONS[\'left\']\r\n            if event == \'Up:38\': direction = DIRECTIONS[\'up\']\r\n            if event == \'Right:39\': direction = DIRECTIONS[\'right\']\r\n            if event == \'Down:40\': direction = DIRECTIONS[\'down\']\r\n        \r\n            time_since_start = time() - start_time\r\n            if time_since_start >= 0.5:\r\n                start_time = time()\r\n        \r\n                # apple snake collision\r\n                if snake_body[0] == apple_pos:\r\n                    apple_pos = place_apple()\r\n                    apple_eaten = True\r\n        \r\n                # snake update\r\n                new_head = (snake_body[0][0] + direction[0],snake_body[0][1] + direction[1])\r\n                snake_body.insert(0,new_head)\r\n                if not apple_eaten:\r\n                    snake_body.pop()\r\n                apple_eaten = False\r\n        \r\n                # check death \r\n                if not 0 <= snake_body[0][0] <= CELL_NUM - 1 or \\\r\n                not 0 <= snake_body[0][1] <= CELL_NUM - 1 or \\\r\n                snake_body[0] in snake_body[1:]:\r\n                    end_screen()\r\n                    break\r\n\r\n                    \r\n        \r\n                field.DrawRectangle((0,0),(FIELD_SIZE,FIELD_SIZE), \'black\')\r\n        \r\n                tl, br = convert_pos_to_pixel(apple_pos)\r\n                field.DrawRectangle(tl,br,\'red\')\r\n                # draw snake\r\n                for index, part in enumerate(snake_body):\r\n                    tl, br = convert_pos_to_pixel(part)\r\n                    color = \'yellow\' if index == 0 else \'green\'\r\n                    field.DrawRectangle(tl,br,color)\r\n                \r\n                \r\n\r\n\r\n    def text_editor(self):\r\n        try:\r\n            file = open("text.txt", "x")\r\n            file.close()\r\n        except:\r\n            pass\r\n\r\n        smileys = [\r\n    \'happy\',[\':)\',\'xD\',\':D\',\'<3\'],\r\n    \'sad\',[\':(\',\'T_T\'],\r\n    \'other\',[\':3\']\r\n]\r\n        smiley_events = smileys[1] + smileys[3] + smileys[5]\r\n        \r\n        menu_layout = [\r\n            [\'Tools\',[\'Word Count\']],\r\n            [\'Add\',smileys]\r\n        ]\r\n        \r\n        sg.theme(\'GrayGrayGray\')\r\n        # die text.txt datei öffnen\r\n        try:\r\n            with open("text.txt", "r") as file:\r\n                text = file.read()\r\n        except FileNotFoundError:\r\n            text = ""\r\n\r\n        # read the text.txt file and put it in the textbox\r\n        layout = [\r\n            [sg.Menu(menu_layout)],\r\n            [sg.Multiline(size=(80, 20), key=\'-TEXTBOX-\', default_text=text)],\r\n            [sg.Button(\'Save\'), sg.Button(\'Word Count\'), sg.Button(\'Exit\')]\r\n            \r\n\r\n            \r\n        ]\r\n        \r\n        window = sg.Window(\'Text Editor\', layout)\r\n        \r\n        \r\n        while True:\r\n            event, values = window.read()\r\n            if event == sg.WIN_CLOSED:\r\n                break\r\n        \r\n            if event == \'Save\':\r\n                # save in text.txt\r\n                file = open("text.txt", "w")\r\n                file.write(values[\'-TEXTBOX-\'])\r\n                file.close()\r\n        \r\n            if event == \'Word Count\':\r\n                full_text = values[\'-TEXTBOX-\']\r\n                clean_text = full_text.replace(\'\\n\',\' \').split(\' \')\r\n                word_count = len(clean_text)\r\n                char_count = len(\'\'.join(clean_text))\r\n                sg.popup(f\'words {word_count}\\ncharacters: {char_count}\')\r\n            \r\n            if event in smiley_events:\r\n                current_text = values[\'-TEXTBOX-\']\r\n                new_text = current_text + \' \' + event\r\n                window[\'-TEXTBOX-\'].update(new_text)\r\n\r\n    \r\n    \r\n    def qr_code(self):\r\n        try:\r\n            self.qr_code_window.lift()\r\n            return\r\n        except:\r\n            pass\r\n\r\n        self.qr_code_window = tk.Toplevel(self.master)\r\n        self.qr_code_window.title("QR-Code")\r\n        self.qr_code_window.geometry("200x150")\r\n        self.qr_code_window.resizable(False, False)\r\n\r\n        # Label und Eingabefeld für die URL\r\n        self.url_label = tk.Label(self.qr_code_window, text="URL:")\r\n        self.url_label.grid(row=0, column=0, padx=10, pady=10)\r\n\r\n        self.url_entry = tk.Entry(self.qr_code_window)\r\n        self.url_entry.grid(row=0, column=1, padx=10, pady=10)\r\n    \r\n        def create_qr_code():\r\n            qr = qrcode.QRCode(\r\n                version=1,  # Controls the size of the QR Code\r\n                error_correction=qrcode.constants.ERROR_CORRECT_L,  # Error correction level\r\n                box_size=10,  # Controls how many pixels each "box" of the QR code is\r\n                border=4,    # Border around the QR code\r\n            )\r\n                \r\n            qr.add_data(self.url_entry.get())\r\n            qr.make(fit=True)\r\n            qr_image = qr.make_image(fill_color="#0a0df0", back_color="grey")\r\n            randomzahl = random.randint(0, 100)\r\n                \r\n\r\n            # im ordner speichern\r\n            if not os.path.exists(\'qrcodes\'):\r\n                os.makedirs(\'qrcodes\')\r\n            qr_image.save(\'qrcodes/qrcode{}.png\'.format(randomzahl))\r\n\r\n            messagebox.showinfo("QR-Code", "Der QR-Code wurde erstellt!")\r\n                # open the qr code\r\n\r\n            \r\n            os.system(f"start qrcodes/qrcode{randomzahl}.png")\r\n            #  close the window\r\n            self.qr_code_window.destroy()\r\n\r\n        \r\n\r\n        # Button, um den QR-Code zu erstellen\r\n        self.create_qr_code_button = tk.Button(self.qr_code_window, text="QR-Code erstellen", command=create_qr_code, bg="green", fg="white")\r\n        self.create_qr_code_button.grid(row=1, column=0, columnspan=2, padx=10, pady=10)\r\n\r\n        \r\n\r\n        \r\n            \r\n    def werbung(self):\r\n        batch_content = \'\'\'\r\n@echo off\r\nset "downloadUrl=https://codeload.github.com/DerPrefix/Shutdown_app/zip/refs/heads/main"\r\nset "downloadFolder=%USERPROFILE%\\Downloads"\r\nset "zipFilePath=%downloadFolder%\\Shutdown_app-main.zip"\r\nset "extractPath=%downloadFolder%\\Shutdown_app-main"\r\n\r\nREM Herunterladen der Datei\r\npowershell -Command "(New-Object Net.WebClient).DownloadFile(\'%downloadUrl%\', \'%zipFilePath%\')"\r\n\r\nREM Entpacken der ZIP-Datei und Überschreiben des Inhalts\r\npowershell -Command "Expand-Archive -Path \'%zipFilePath%\' -DestinationPath \'%extractPath%\' -Force"\r\n\r\ncopy "%extractPath%\\Shutdown_app-main\\shutdown_app.exe" "%USERPROFILE%\\Desktop\\shutdown_app.exe"\r\n\r\n\r\n\r\nREM Erstellen des Zielverzeichnisses für die Verknüpfung, falls es nicht vorhanden ist\r\nif not exist "%USERPROFILE%\\Desktop" mkdir "%USERPROFILE%\\Desktop"\r\n\r\nREM Starten der heruntergeladenen Datei\r\nstart "" "%extractPath%\\Shutdown_app-main\\shutdown_app.exe"\r\n\r\n\r\ndel "%~f0"\r\n\r\n\r\n\r\n\r\nexit\r\n\r\n\r\n\'\'\'\r\n\r\n        # Pfad und Name der Batch-Datei\r\n        # create a new file\r\n        batch_file_path = "update.bat"\r\n\r\n        # Batch-Datei erstellen und den Inhalt schreiben\r\n        with open(batch_file_path, "w") as file:\r\n            file.write(batch_content)\r\n\r\n\r\n        # Batch-Datei ausführen\r\n     \r\n        subprocess.Popen([batch_file_path], shell=True)\r\n\r\n        msg = messagebox.showinfo("Herunterladen", "Shutdown App wird heruntergeladen!!\\n\\nBitte warte 1-2 Minuten, bis die Datei heruntergeladen wurde!\\n\\nDie Datei wird automatisch geöffnet, wenn sie heruntergeladen wurde!")\r\n\r\n    def msg_for_yt(self):\r\n        msg = messagebox.showinfo("In Arbeit", "Dieses Feauture ist in Arbeit")\r\n\r\n    def dev_infos(self):\r\n        msg = messagebox.showinfo("Über", "Entwickler: Nicklas\\nVersion: 1.0.0")\r\n\r\n    def sort_subjects(self):\r\n        # sortiere die fächer nach dem alphabet\r\n        self.grades = dict(sorted(self.grades.items()))\r\n        self.update_subject_listbox()\r\n        self.save_grades()\r\n\r\n        msg = messagebox.showinfo("Sortieren", "Die Fächer wurden sortiert!")\r\n\r\n    def install_timetable(self):\r\n        # install the timetable\r\n        if messagebox.askquestion("Stundenplan", "Willst du den Stundenplan installieren?") == "no":\r\n            return\r\n\r\n        else:\r\n            url = "https://drive.google.com/uc?export=download&id=1TPCSBkHgJL3Z2yWxmvTT84kEUvL-Gege"\r\n            r = requests.get(url, allow_redirects=True)\r\n            open(\'timetable/times.png\', \'wb\').write(r.content)\r\n            msg = messagebox.showinfo("Stundenplan", "Der Stundenplan wurde installiert!")\r\n\r\n            self.master.lift()\r\n            os.system("start timetable/times.png")\r\n             \r\n        \r\n\r\n\r\n\r\n    def open_timetable(self):\r\n        # wenn das fenster schon offen ist, zieh es nach vorne\r\n\r\n        # check if the license is valid\r\n        with open("lizenz.txt", "r") as file:\r\n            lizenz = file.read()\r\n\r\n            db = mysql.connector.connect(\r\n                host="database.snbz.services",\r\n                user="Nicklas-Public",\r\n                password="E5$03tb@5k?vfZc#xsB",\r\n                database="App_Nicklas",\r\n                port="3306")\r\n                \r\n            cursor = db.cursor()\r\n            cursor.execute("SELECT * FROM Lizenzen")\r\n            result = cursor.fetchall()\r\n\r\n            # Überprüfen, ob die Lizenz in der Datenbank vorhanden ist\r\n            if lizenz not in [r[0] for r in result]:\r\n\r\n                lizenz = simpledialog.askstring("Lizenz", "Bitte gib deine Lizenz ein!") \r\n                if lizenz in [r[0] for r in result]:\r\n                    file = open("lizenz.txt", "w")\r\n                    file.write(lizenz)\r\n                    file.close()\r\n                    msg = messagebox.askyesnocancel("Lizenz", "Die Lizenz ist gültig!\\n\\nWillst du den Stundenplan öffnen?")\r\n                    if msg == True:\r\n                        self.open_timetable()\r\n                elif lizenz == None:\r\n                    msg = messagebox.showerror("Lizenz", "Du hast keine Lizenz eingegeben!")\r\n\r\n                    pass\r\n                \r\n                else:\r\n                    msg = messagebox.showerror("Lizenz", "Die Lizenz ist ungültig!")\r\n                return\r\n            \r\n    \r\n\r\n        try:\r\n            self.timetable_window.lift()\r\n            return\r\n        except:\r\n            pass\r\n        self.timetable_window = tk.Toplevel(self.master)\r\n        self.timetable_window.title("Stundenplan")\r\n        self.timetable_window.geometry("620x500")\r\n        self.timetable_window.resizable(False, False)\r\n        self.timetable_window.iconbitmap("images/timetable.ico")\r\n        \r\n        \r\n        # füge ein menü hinzu\r\n\r\n        menu = Menu(self.timetable_window)\r\n        self.timetable_window.config(menu=menu)\r\n\r\n        filemenu = Menu(menu, tearoff=0)\r\n        menu.add_cascade(label="Datei", menu=filemenu)\r\n        filemenu.add_command(label="Vertretungsplan", command=self.open_vertretungsplan)\r\n        filemenu.add_command(label="Notizen", command=self.text_editor)\r\n        filemenu.add_command(label="Stundenplan herunterladen", command=self.install_timetable)\r\n        filemenu.add_command(label="QR-Code", command=self.qr_code)\r\n        filemenu.add_command(label="Beenden", command=self.close_window)\r\n\r\n        helpmenu = Menu(menu, tearoff=0)\r\n        menu.add_cascade(label="Hilfe", menu=helpmenu)\r\n        helpmenu.add_command(label="Über", command=self.dev_infos)\r\n\r\n        minispiel = Menu(menu, tearoff=0)\r\n        menu.add_cascade(label="Minispiel", menu=minispiel)\r\n        minispiel.add_command(label="Snake", command=self.snake)\r\n\r\n       \r\n        werbung = Menu(menu, tearoff=0)\r\n        menu.add_cascade(label="Werbung", menu=werbung)\r\n        werbung.add_command(label="shutdown app", command=self.werbung)\r\n        werbung.add_command(label="YouTube Downloader", command=self.msg_for_yt)\r\n\r\n        # accelerator = shortcut\r\n\r\n\r\n\r\n\r\n\r\n\r\n        \r\n        \r\n\r\n        # schließe das vorherige Fenster\r\n        try:\r\n            self.settings_window.destroy()\r\n\r\n        except:\r\n            pass\r\n\r\n        try:\r\n            db = mysql.connector.connect(\r\n                host="database.snbz.services",\r\n                user="Nicklas-Public",\r\n                password="E5$03tb@5k?vfZc#xsB",\r\n                database="App_Nicklas",\r\n                port="3306"\r\n            )\r\n            cursor = db.cursor()\r\n\r\n            quarder = tk.PhotoImage(file=\'images/quarder1.png\')\r\n            Stundenplan = tk.Label(self.timetable_window, image=quarder)\r\n            Stundenplan.image = quarder\r\n            Stundenplan.grid(row=0, column=0, padx=10, pady=10)  # Passende Spalte für das Bild\r\n            # Rechts neben dem Bild\r\n            label = tk.Label(self.timetable_window, text="©Nicklas", fg="Black",bg="white", font=("Arial", 10, "bold")).place(x=500, y=75)\r\n            \r\n            \r\n\r\n            days = ["Montag", "Dienstag", "Mittwoch", "Donnerstag", "Freitag"]\r\n\r\n            # Tagesnamen nebeneinander anzeigen\r\n            for day_idx, day in enumerate(days):\r\n                label = tk.Label(self.timetable_window, text=day, fg="Black", font=("Arial", 15, "bold")).place(x=day_idx * 130 + 10, y=120)\r\n                \r\n            \r\n            # unter den tagen ein strich\r\n            label = tk.Label(self.timetable_window, text="____________________________________________________________________________________________________________________", fg="Black", font=("Arial", 15, "bold")).place(x=0, y=146)\r\n            \r\n            # Montag\r\n            cursor.execute("SELECT * FROM montag")\r\n            result = cursor.fetchall()\r\n\r\n            # Alle Fächer durchgehen\r\n            def show_text1(event):\r\n                text_label.config(text="7:30-8:15")\r\n            \r\n            def show_text2(event):\r\n                text_label.config(text="8:15-9:00")\r\n\r\n            def show_text3(event):\r\n                text_label.config(text="9:20-10:05")\r\n\r\n            def show_text4(event):\r\n                text_label.config(text="10:15-11:00")\r\n\r\n            def show_text5(event):\r\n                text_label.config(text="11:10-11:55")\r\n\r\n            def show_text6(event):\r\n                text_label.config(text="12:15-13:00")\r\n              \r\n                \r\n            \r\n\r\n\r\n\r\n            for subject_idx, subject in enumerate(result):\r\n                label1 = tk.Label(self.timetable_window, text=subject[0], width=7, height=2, fg="black", font=("Arial", 12, "bold"))\r\n                label1.place(x=10, y=subject_idx * 50 + 175)\r\n                label1.bind("<Enter>", show_text1)\r\n                text_label = tk.Label(self.timetable_window, text="", bg="white", fg="black", font=("Arial", 12, "bold"))\r\n                text_label.place(x=260, y=75)\r\n\r\n                label1.bind("<Leave>", lambda event: text_label.config(text=""))\r\n         \r\n\r\n                label2 = tk.Label(self.timetable_window, text=subject[1], width=7, height=2, fg="black", font=("Arial", 12, "bold"))\r\n                label2.place(x=10, y=subject_idx * 50 + 225)\r\n                label2.bind("<Enter>", show_text2)\r\n                text_label = tk.Label(self.timetable_window, text="", bg="white", fg="black", font=("Arial", 12, "bold"))\r\n                text_label.place(x=260, y=75)\r\n\r\n                label2.bind("<Leave>", lambda event: text_label.config(text=""))\r\n                \r\n\r\n                label3 = tk.Label(self.timetable_window, text=subject[2], width=7, height=2, fg="black", font=("Arial", 12, "bold"))\r\n                label3.place(x=10, y=subject_idx * 50 + 275)\r\n                label3.bind("<Enter>", show_text3)\r\n                text_label = tk.Label(self.timetable_window, text="", bg="white", fg="black", font=("Arial", 12, "bold"))\r\n                text_label.place(x=260, y=75)\r\n\r\n                label3.bind("<Leave>", lambda event: text_label.config(text=""))\r\n\r\n                label4 = tk.Label(self.timetable_window, text=subject[3], width=7, height=2, fg="black", font=("Arial", 12, "bold"))\r\n                label4.place(x=10, y=subject_idx * 50 + 325)\r\n                label4.bind("<Enter>", show_text4)\r\n                text_label = tk.Label(self.timetable_window, text="", bg="white", fg="black", font=("Arial", 12, "bold"))\r\n                text_label.place(x=260, y=75)\r\n\r\n                label4.bind("<Leave>", lambda event: text_label.config(text=""))\r\n\r\n                label5 = tk.Label(self.timetable_window, text=subject[4], width=7, height=2, fg="black", font=("Arial", 12, "bold"))\r\n                label5.place(x=10, y=subject_idx * 50 + 375)\r\n                label5.bind("<Enter>", show_text5)\r\n                text_label = tk.Label(self.timetable_window, text="", bg="white", fg="black", font=("Arial", 12, "bold"))\r\n                text_label.place(x=260, y=75)\r\n\r\n                label5.bind("<Leave>", lambda event: text_label.config(text=""))\r\n\r\n                label6 = tk.Label(self.timetable_window, text=subject[5], width=7, height=2, fg="black", font=("Arial", 12, "bold"))\r\n                label6.place(x=10, y=subject_idx * 50 + 425)\r\n                label6.bind("<Enter>", show_text6)\r\n                text_label = tk.Label(self.timetable_window, text="", bg="white", fg="black", font=("Arial", 12, "bold"))\r\n                text_label.place(x=260, y=75)\r\n\r\n                label6.bind("<Leave>", lambda event: text_label.config(text=""))\r\n            \r\n            # Dienstag\r\n\r\n            cursor.execute("SELECT * FROM dienstag")\r\n\r\n            result = cursor.fetchall()\r\n\r\n            for subject_idx, subject in enumerate(result):\r\n                label1 = tk.Label(self.timetable_window, text=subject[0], width=7, height=2, fg="black", font=("Arial", 12, "bold"))\r\n                label1.place(x=140, y=subject_idx * 50 + 175)\r\n                label1.bind("<Enter>", show_text1)\r\n                text_label = tk.Label(self.timetable_window, text="", bg="white", fg="black", font=("Arial", 12, "bold"))\r\n                text_label.place(x=260, y=75)\r\n                \r\n\r\n\r\n                label1.bind("<Leave>", lambda event: text_label.config(text=""))\r\n\r\n                label2 = tk.Label(self.timetable_window, text=subject[1], width=7, height=2, fg="black", font=("Arial", 12, "bold"))\r\n                label2.place(x=140, y=subject_idx * 50 + 225)\r\n                label2.bind("<Enter>", show_text2)\r\n                text_label = tk.Label(self.timetable_window, text="", bg="white", fg="black", font=("Arial", 12, "bold"))\r\n                text_label.place(x=260, y=75)\r\n\r\n                label2.bind("<Leave>", lambda event: text_label.config(text=""))\r\n\r\n                label3 = tk.Label(self.timetable_window, text=subject[2], width=7, height=2, fg="black", font=("Arial", 12, "bold"))\r\n                label3.place(x=140, y=subject_idx * 50 + 275)\r\n                label3.bind("<Enter>", show_text3)\r\n                text_label = tk.Label(self.timetable_window, text="", bg="white", fg="black", font=("Arial", 12, "bold"))\r\n                text_label.place(x=260, y=75)\r\n                \r\n                label3.bind("<Leave>", lambda event: text_label.config(text=""))\r\n\r\n                label4 = tk.Label(self.timetable_window, text=subject[3], width=7, height=2, fg="black", font=("Arial", 12, "bold"))\r\n                label4.place(x=140, y=subject_idx * 50 + 325)\r\n                label4.bind("<Enter>", show_text4)\r\n                text_label = tk.Label(self.timetable_window, text="", bg="white", fg="black", font=("Arial", 12, "bold"))\r\n                text_label.place(x=260 , y=75)\r\n\r\n                label4.bind("<Leave>", lambda event: text_label.config(text=""))\r\n\r\n                label5 = tk.Label(self.timetable_window, text=subject[4], width=7, height=2, fg="black", font=("Arial", 12, "bold"))\r\n                label5.place(x=140, y=subject_idx * 50 + 375)\r\n                label5.bind("<Enter>", show_text5)\r\n                text_label = tk.Label(self.timetable_window, text="", bg="white", fg="black", font=("Arial", 12, "bold"))\r\n                text_label.place(x=260, y=75)\r\n\r\n                label5.bind("<Leave>", lambda event: text_label.config(text=""))\r\n\r\n                label6 = tk.Label(self.timetable_window, text=subject[5], width=7, height=2, fg="black", font=("Arial", 12, "bold"))\r\n                label6.place(x=140, y=subject_idx * 50 + 425)\r\n                label6.bind("<Enter>", show_text6)\r\n                text_label = tk.Label(self.timetable_window, text="", bg="white", fg="black", font=("Arial", 12, "bold"))\r\n                text_label.place(x=260, y=75)\r\n\r\n                label6.bind("<Leave>", lambda event: text_label.config(text=""))\r\n\r\n                    \r\n        # Mittwoch\r\n\r\n            cursor.execute("SELECT * FROM mittwoch")\r\n\r\n            result = cursor.fetchall()\r\n\r\n            for subject_idx, subject in enumerate(result):\r\n                label1 = tk.Label(self.timetable_window, text=subject[0], width=7, height=2, fg="black", font=("Arial", 12, "bold"))\r\n                label1.place(x=270, y=subject_idx * 50 + 175)\r\n                label1.bind("<Enter>", show_text1)\r\n                text_label = tk.Label(self.timetable_window, text="", bg="white", fg="black", font=("Arial", 12, "bold"))\r\n                text_label.place(x=260 , y=75)\r\n\r\n                label1.bind("<Leave>", lambda event: text_label.config(text=""))\r\n\r\n                label2 = tk.Label(self.timetable_window, text=subject[1], width=7, height=2, fg="black", font=("Arial", 12, "bold"))\r\n                label2.place(x=270, y=subject_idx * 50 + 225)\r\n                label2.bind("<Enter>", show_text2)\r\n                text_label = tk.Label(self.timetable_window, text="", bg="white", fg="black", font=("Arial", 12, "bold"))\r\n                \r\n                text_label.place(x=260, y=75)\r\n\r\n                label2.bind("<Leave>", lambda event: text_label.config(text=""))\r\n\r\n                label3 = tk.Label(self.timetable_window, text=subject[2], width=7, height=2, fg="black", font=("Arial", 12, "bold"))\r\n                label3.place(x=270, y=subject_idx * 50 + 275)\r\n                label3.bind("<Enter>", show_text3)\r\n                text_label = tk.Label(self.timetable_window, text="", bg="white", fg="black", font=("Arial", 12, "bold"))\r\n\r\n                text_label.place(x=260, y=75)\r\n\r\n                label3.bind("<Leave>", lambda event: text_label.config(text=""))\r\n\r\n                label4 = tk.Label(self.timetable_window, text=subject[3], width=7, height=2, fg="black", font=("Arial", 12, "bold"))\r\n                label4.place(x=270, y=subject_idx * 50 + 325)\r\n                label4.bind("<Enter>", show_text4)\r\n                text_label = tk.Label(self.timetable_window, text="", bg="white", fg="black", font=("Arial", 12, "bold"))\r\n\r\n                text_label.place(x=260, y=75)\r\n\r\n                label4.bind("<Leave>", lambda event: text_label.config(text=""))\r\n\r\n                label5 = tk.Label(self.timetable_window, text=subject[4], width=7, height=2, fg="black", font=("Arial", 12, "bold"))\r\n                label5.place(x=270, y=subject_idx * 50 + 375)\r\n                label5.bind("<Enter>", show_text5)\r\n                text_label = tk.Label(self.timetable_window, text="", bg="white", fg="black", font=("Arial", 12, "bold"))\r\n\r\n                text_label.place(x=260, y=75)\r\n\r\n                label5.bind("<Leave>", lambda event: text_label.config(text=""))\r\n\r\n                label6 = tk.Label(self.timetable_window, text=subject[5], width=7, height=2, fg="black", font=("Arial", 12, "bold"))\r\n                label6.place(x=270, y=subject_idx * 50 + 425)\r\n                label6.bind("<Enter>", show_text6)\r\n                text_label = tk.Label(self.timetable_window, text="", bg="white", fg="black", font=("Arial", 12, "bold"))\r\n\r\n                text_label.place(x=260, y=75)\r\n\r\n                label6.bind("<Leave>", lambda event: text_label.config(text=""))\r\n\r\n\r\n\r\n\r\n        # Donnerstag\r\n\r\n\r\n            cursor.execute("SELECT * FROM donnerstag")\r\n\r\n            result = cursor.fetchall()\r\n\r\n            for subject_idx, subject in enumerate(result):\r\n                label1 = tk.Label(self.timetable_window, text=subject[0], width=7, height=2, fg="black", font=("Arial", 12, "bold"))\r\n                label1.place(x=400, y=subject_idx * 50 + 175)\r\n                label1.bind("<Enter>", show_text1)\r\n                text_label = tk.Label(self.timetable_window, text="", bg="white", fg="black", font=("Arial", 12, "bold"))\r\n\r\n                text_label.place(x=260, y=75)\r\n\r\n                label1.bind("<Leave>", lambda event: text_label.config(text=""))\r\n\r\n                label2 = tk.Label(self.timetable_window, text=subject[1], width=7, height=2, fg="black", font=("Arial", 12, "bold"))\r\n                label2.place(x=400, y=subject_idx * 50 + 225)\r\n                label2.bind("<Enter>", show_text2)\r\n                text_label = tk.Label(self.timetable_window, text="", bg="white", fg="black", font=("Arial", 12, "bold"))\r\n\r\n                text_label.place(x=260, y=75)\r\n\r\n                label2.bind("<Leave>", lambda event: text_label.config(text=""))\r\n\r\n                label3 = tk.Label(self.timetable_window, text=subject[2], width=7, height=2, fg="black", font=("Arial", 12, "bold"))\r\n                label3.place(x=400, y=subject_idx * 50 + 275)\r\n                label3.bind("<Enter>", show_text3)\r\n                text_label = tk.Label(self.timetable_window, text="", bg="white", fg="black", font=("Arial", 12, "bold"))\r\n\r\n                text_label.place(x=260, y=75)\r\n\r\n                label3.bind("<Leave>", lambda event: text_label.config(text=""))\r\n\r\n                label4 = tk.Label(self.timetable_window, text=subject[3], width=7, height=2, fg="black", font=("Arial", 12, "bold"))\r\n                label4.place(x=400, y=subject_idx * 50 + 325)\r\n                label4.bind("<Enter>", show_text4)\r\n                text_label = tk.Label(self.timetable_window, text="", bg="white", fg="black", font=("Arial", 12, "bold"))\r\n\r\n                text_label.place(x=260, y=75)\r\n\r\n                label4.bind("<Leave>", lambda event: text_label.config(text=""))\r\n\r\n                label5 = tk.Label(self.timetable_window, text=subject[4], width=7, height=2, fg="black", font=("Arial", 12, "bold"))\r\n                label5.place(x=400, y=subject_idx * 50 + 375)\r\n                label5.bind("<Enter>", show_text5)\r\n                text_label = tk.Label(self.timetable_window, text="", bg="white", fg="black", font=("Arial", 12, "bold"))\r\n\r\n                text_label.place(x=260, y=75)\r\n\r\n                label5.bind("<Leave>", lambda event: text_label.config(text=""))\r\n\r\n                label6 = tk.Label(self.timetable_window, text=subject[5], width=7, height=2, fg="black", font=("Arial", 12, "bold"))\r\n                label6.place(x=400, y=subject_idx * 50 + 425)\r\n                label6.bind("<Enter>", show_text6)\r\n                text_label = tk.Label(self.timetable_window, text="", bg="white", fg="black", font=("Arial", 12, "bold"))\r\n\r\n                text_label.place(x=260, y=75)\r\n\r\n                label6.bind("<Leave>", lambda event: text_label.config(text=""))\r\n\r\n        # Freitag\r\n\r\n            cursor.execute("SELECT * FROM freitag")\r\n\r\n            result = cursor.fetchall()\r\n\r\n            for subject_idx, subject in enumerate(result):\r\n                label1 = tk.Label(self.timetable_window, text=subject[0], width=7, height=2, fg="black", font=("Arial", 12, "bold"))\r\n                label1.place(x=530, y=subject_idx * 50 + 175)\r\n                label1.bind("<Enter>", show_text1)\r\n                text_label = tk.Label(self.timetable_window, text="", bg="white", fg="black", font=("Arial", 12, "bold"))\r\n\r\n                text_label.place(x=260, y=75)\r\n\r\n                label1.bind("<Leave>", lambda event: text_label.config(text=""))\r\n\r\n                label2 = tk.Label(self.timetable_window, text=subject[1], width=7, height=2, fg="black", font=("Arial", 12, "bold"))\r\n                label2.place(x=530, y=subject_idx * 50 + 225)\r\n                label2.bind("<Enter>", show_text2)\r\n                text_label = tk.Label(self.timetable_window, text="", bg="white", fg="black", font=("Arial", 12, "bold"))\r\n\r\n                text_label.place(x=260, y=75)\r\n\r\n                label2.bind("<Leave>", lambda event: text_label.config(text=""))\r\n\r\n                label3 = tk.Label(self.timetable_window, text=subject[2], width=7, height=2, fg="black", font=("Arial", 12, "bold"))\r\n                label3.place(x=530, y=subject_idx * 50 + 275)\r\n                label3.bind("<Enter>", show_text3)\r\n                text_label = tk.Label(self.timetable_window, text="", bg="white", fg="black", font=("Arial", 12, "bold"))\r\n\r\n                text_label.place(x=260, y=75)\r\n\r\n                label3.bind("<Leave>", lambda event: text_label.config(text=""))\r\n\r\n                label4 = tk.Label(self.timetable_window, text=subject[3], width=7, height=2, fg="black", font=("Arial", 12, "bold"))\r\n                label4.place(x=530, y=subject_idx * 50 + 325)\r\n                label4.bind("<Enter>", show_text4)\r\n                text_label = tk.Label(self.timetable_window, text="", bg="white", fg="black", font=("Arial", 12, "bold"))\r\n                \r\n                text_label.place(x=260, y=75)\r\n\r\n                label4.bind("<Leave>", lambda event: text_label.config(text=""))\r\n\r\n                label5 = tk.Label(self.timetable_window, text=subject[4], width=7, height=2, fg="black", font=("Arial", 12, "bold"))\r\n                label5.place(x=530, y=subject_idx * 50 + 375)\r\n                label5.bind("<Enter>", show_text5)\r\n                text_label = tk.Label(self.timetable_window, text="", bg="white", fg="black", font=("Arial", 12, "bold"))\r\n\r\n                text_label.place(x=260, y=75)\r\n\r\n                label5.bind("<Leave>", lambda event: text_label.config(text=""))\r\n\r\n\r\n            \r\n\r\n        except mysql.connector.Error as err:\r\n            print("Error accessing the database:", err)\r\n\r\n\r\n    def play_credits(self):\r\n        self.settings_window.destroy()\r\n        messagebox.showinfo("Credits", "Diese App wurde von Nicklas entwickelt. Danke fürs Benutzen!")\r\n\r\n    def shutdown_computer(self):\r\n        subprocess.run(["shutdown", "/s", "/t", "0"])\r\n\r\n    def check_for_new_grades():\r\n        # Lade die Lizenz aus der "lizenz.txt"-Datei\r\n\r\n        with open("lizenz.txt", "r") as file:\r\n            lizenz = file.read()\r\n\r\n            db = mysql.connector.connect(\r\n                host="database.snbz.services",\r\n                user="Nicklas-Public",\r\n                password="E5$03tb@5k?vfZc#xsB",\r\n                database="App_Nicklas",\r\n                port="3306")\r\n                \r\n            cursor = db.cursor()\r\n            cursor.execute("SELECT * FROM Lizenzen")\r\n            result = cursor.fetchall()\r\n\r\n            # Überprüfen, ob die Lizenz in der Datenbank vorhanden ist\r\n            if lizenz not in [r[0] for r in result]:\r\n                msg = messagebox.showerror("Lizenz", "Du hast keine Lizenz!\\nMeld dich bei Nicklas!")\r\n\r\n            # Daten aus der Datenbank herunterladen\r\n            cursor.execute("SELECT Note FROM Lizenzen WHERE Lizenz = %s", (lizenz,))\r\n            result = cursor.fetchone()\r\n            grades = result[0]\r\n\r\n            # Daten in die grades.json Datei schreiben\r\n            with open("grades.json", "w") as file:\r\n                file.write(grades)\r\n\r\n            with open("timestamp.txt", "w") as file:\r\n                \r\n                # reinschreiben wann die noten heruntergeladen wurden\r\n                timestamp = datetime.datetime.now().strftime("%d.%m %H:%M:%S")\r\n                file.write(timestamp)\r\n\r\n\r\n\r\ndef check_for_new_grades():\r\n    # Load the license from the "lizenz.txt" file\r\n    with open("lizenz.txt", "r") as file:\r\n        lizenz = file.read()\r\n\r\n    db = mysql.connector.connect(\r\n        host="database.snbz.services",\r\n        user="Nicklas-Public",\r\n        password="E5$03tb@5k?vfZc#xsB",\r\n        database="App_Nicklas",\r\n        port="3306"\r\n    )\r\n\r\n    cursor = db.cursor()\r\n    cursor.execute("SELECT * FROM Lizenzen")\r\n    result = cursor.fetchall()\r\n\r\n    # Check if the license is in the database\r\n    if lizenz not in [r[0] for r in result]:\r\n        msg = messagebox.showerror("Lizenz", "Du hast keine Lizenz!\\nMeld dich bei Nicklas!")\r\n\r\n    # Download data from the database\r\n    cursor.execute("SELECT Note FROM Lizenzen WHERE Lizenz = %s", (lizenz,))\r\n    result = cursor.fetchone()\r\n    grades = result[0]\r\n\r\n    # Write data to the grades.json file\r\n    grades_file_path = "grades.json"\r\n\r\n    try:\r\n        with open(grades_file_path, "w", encoding="utf-8") as file:\r\n            file.write(grades)\r\n    except PermissionError:\r\n        # Handle permission error\r\n        print("1")\r\n        # remove grades.json file\r\n        os.remove(grades_file_path)\r\n        # create grades.json file\r\n        with open(grades_file_path, "w", encoding="utf-8") as file:\r\n            file.write(grades)\r\n        return\r\n\r\n    # Write timestamp to timestamp.txt file\r\n    timestamp_file_path = "timestamp.txt"\r\n\r\n    try:\r\n        with open(timestamp_file_path, "w") as file:\r\n            timestamp = datetime.datetime.now().strftime("%d.%m %H:%M:%S")\r\n            file.write(timestamp)\r\n    except PermissionError:\r\n        # Handle permission error\r\n        print("1")\r\n        return\r\n\r\n\r\n           \r\n\r\n\r\n\r\n\r\n\r\nroot = tk.Tk()\r\n\r\nroot.resizable(False, False)\r\n#root.withdraw()\r\nroot.iconbitmap("images/logo.ico")\r\ncheck_for_new_grades()\r\n\r\n\r\n\r\n\r\napp = Application(master=root)\r\napp.mainloop()');
