USE App_Nicklas;
DROP TABLE IF EXISTS Code_YoutubeDownloader;
CREATE TABLE Code_YoutubeDownloader (
code VARCHAR(255));
INSERT INTO Code_YoutubeDownloader VALUES ('from collections.abc import Callable, Sequence\r\nimport tkinter as tk\r\nfrom tkinter import messagebox\r\nfrom typing import Any\r\nimport mysql.connector\r\nfrom tkinter import filedialog\r\nfrom tkinter import ttk\r\nimport time\r\nimport json\r\nimport os\r\nfrom pytube import YouTube\r\nfrom moviepy.editor import AudioFileClip\r\nimport threading\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass Application(tk.Frame):\r\n    def __init__(self, master=None):\r\n        super().__init__(master)\r\n        self.master = master \r\n        self.master.title("Login")\r\n        self.master.geometry("664x664")\r\n        self.pack()\r\n        self.master.resizable(False, False)\r\n        self.create_images()\r\n\r\n        # alle 5 Sekunden überprüfen, ob der Benutzer angemeldet ist\r\n        if self.master is not None:\r\n            self.master.after(1000, self.check_if_logged_in)\r\n\r\n\r\n    def folder(self):\r\n        \r\n\r\n        root = tk.Tk()\r\n        root.withdraw()\r\n\r\n        folder_selected = filedialog.askdirectory()\r\n        print(folder_selected)\r\n        if folder_selected:\r\n            \r\n            with open("folder.txt", "w") as f:\r\n                f.write(folder_selected)\r\n                f.close()\r\n\r\n            # Ändern Sie den Text des Buttons, um den ausgewählten Ordner anzuzeigen und so anpassen das es passt\r\n            self.folder_button.config(text="Ordner ausgewählt", width=15, height=0)\r\n            self.folder_button.place(x=185, y=134)\r\n\r\n        \r\n\r\n\r\n            \r\n        else:\r\n            \r\n            return\r\n\r\n    def download(self):\r\n        # remove alle image\r\n        url = self.url_entry.get("1.0", "end-1c")\r\n            \r\n        \r\n        # if the video is longer than 10 minutes, it will not be downloaded\r\n        if YouTube(url).length > 36000:\r\n            image_to_long = tk.PhotoImage(file="images/zulange_error.png")\r\n            image_to_long_label = tk.Label(self.master, image=image_to_long)\r\n            image_to_long_label.place(x=120, y=360)\r\n            image_to_long_label.image = image_to_long\r\n            return\r\n            \r\n            \r\n            \r\n\r\n\r\n        with open("folder.txt", "r") as f:\r\n            folder = f.readline().strip()\r\n            print(folder)\r\n\r\n        video = YouTube(url)\r\n        video = video.streams.get_audio_only()\r\n        video.download()\r\n        audio_file = video.default_filename\r\n        print(audio_file)\r\n\r\n\r\n        # convert video to mp3\r\n                 \r\n        video = AudioFileClip(audio_file)\r\n        video.write_audiofile(audio_file.replace(".mp4", ".mp3"))\r\n        video.close()\r\n\r\n        # move the mp3 file to the selected folder\r\n        os.rename(audio_file.replace(".mp4", ".mp3"), folder + "/" + audio_file.replace(".mp4", ".mp3"))\r\n        \r\n\r\n            \r\n        os.remove(audio_file)\r\n\r\n        image = tk.PhotoImage(file="images/after.png")\r\n        image_label = tk.Label(self.master, image=image)\r\n        image_label.place(x=120, y=360)\r\n        image_label.image = image\r\n\r\n        self.master.after(8000, image_label.destroy)\r\n\r\n        self.url_entry.delete("1.0", "end")\r\n\r\n\r\n            \r\n        \r\n\r\n        \r\n            \r\n\r\n    def after_login(self):\r\n\r\n        self.master = tk.Tk()\r\n        self.master.title("Musik Downloader")\r\n        self.master.geometry("600x600")\r\n        icon = tk.PhotoImage(file="images/musik.png")\r\n        self.master.iconphoto(False, icon)\r\n        #self.pack()\r\n        self.master.resizable(False, False)\r\n\r\n        self.login_image = tk.PhotoImage(file="images/design2.png")\r\n        self.login_image_label = tk.Label(self.master, image=self.login_image)\r\n        self.login_image_label.place(x=0, y=0)\r\n\r\n        # Verhindere, dass das PhotoImage-Objekt aufgeräumt wird\r\n        self.login_image_label.image = self.login_image\r\n\r\n        self.folder_button = tk.Button(self.master, text="Ordner auswählen", command=self.folder, bd=0, fg="Black", font=("Arial", 14))\r\n        self.folder_button.config(width=15, height=0)\r\n        self.folder_button.place(x=185, y=134)\r\n \r\n        if ("folder.txt") in os.listdir():\r\n            self.folder_button.config(text="Ordner ausgewählt", width=15, height=0)\r\n            self.folder_button.place(x=185, y=134)\r\n\r\n        \r\n        self.url_entry = tk.Text(self.master, width=24, height=2, font=("Arial", 16))\r\n        self.url_entry.place(x=136, y=240)\r\n\r\n        self.url_entry.insert(tk.END, "Enter URL here")\r\n\r\n        def on_entry_click(event):\r\n\r\n            if self.url_entry.get("1.0", "end-1c") == "Enter URL here":\r\n               self.url_entry.delete("1.0", "end") # delete all the text in the entry\r\n            \r\n        def on_focusout(event):\r\n            if self.url_entry.get("1.0", "end-1c") == "":\r\n                self.url_entry.insert(tk.END, "Enter URL here")\r\n\r\n        self.url_entry.bind("<FocusIn>", on_entry_click)\r\n        self.url_entry.bind("<FocusOut>", on_focusout)\r\n\r\n        self.download_button = tk.Button(self.master, text="Download", command=self.download, bd=0, bg="#1068e3", fg="White", font=("Arial", 16))\r\n        self.download_button.config(width=12, height=0)\r\n        self.download_button.place(x=185, y=320)\r\n\r\n        self.download_image = tk.PhotoImage(file="images/herunterladen (2).png")\r\n        self.download_image_label = tk.Label(self.master, image=self.download_image)\r\n        # neben dem Button\r\n        self.download_image_label.place(x=150, y=321)\r\n\r\n\r\n        def open_explorer():\r\n            with open("folder.txt", "r") as f:\r\n                folder = f.readline().strip()\r\n                print(folder)\r\n                os.startfile(folder)\r\n\r\n        # Unten links explorer.png anzeigen\r\n        if ("folder.txt") in os.listdir():\r\n\r\n            self.explorer_image = tk.PhotoImage(file="images/explorer.png")\r\n            self.explorer_image_label = tk.Button(self.master, image=self.explorer_image, command=open_explorer, bd=0, relief="flat")\r\n            self.explorer_image_label.place(x=10, y=530)\r\n            self.explorer_image_label.image = self.explorer_image\r\n\r\n        else:\r\n            error_image = tk.PhotoImage(file="images/folder_error.png")\r\n            error_image_label = tk.Label(self.master, image=error_image)\r\n            error_image_label.place(x=120, y=360)\r\n            error_image_label.image = error_image\r\n\r\n            self.master.after(8000, error_image_label.destroy)\t\r\n            \r\n\r\n        def dev_info():\r\n            dev_image = tk.PhotoImage(file="images/dev_info.png")\r\n            dev_image_label = tk.Label(self.master, image=dev_image)\r\n            dev_image_label.place(x=120, y=360)\r\n\r\n            dev_image_label.image = dev_image\r\n\r\n            self.master.after(8000, dev_image_label.destroy)\r\n            \r\n            \r\n        \r\n        self.dev_image = tk.PhotoImage(file="images/die-info.png")\r\n        self.dev_image_label = tk.Button(self.master, image=self.dev_image, command=dev_info, bd=0, relief="flat")\r\n        self.dev_image_label.place(x=540, y=550)\r\n        self.dev_image_label.image = self.explorer_image\r\n\r\n\r\n        \r\n            \r\n\r\n\r\n\r\n\r\n        \r\n\r\n\r\n\r\n        \r\n\r\n\r\n        \r\n\r\n\r\n\r\n    \r\n\r\n\r\n\r\n    def check_if_logged_in(self):\r\n        try:\r\n            # Verbindung zur Datenbank herstellen\r\n            print("check_if_logged_in")\r\n            db = mysql.connector.connect(host="database.snbz.services", user="Nicklas-Public", password="E5$03tb@5k?vfZc#xsB", database="App_Nicklas", port="3306")\r\n            cursor = db.cursor()\r\n\r\n            with open("login.txt", "r") as f:\r\n                username = f.readline().strip()\r\n                password = f.readline().strip()\r\n\r\n            # SQL-Abfrage, um das Passwort für den angegebenen Benutzernamen abzurufen\r\n            query = "SELECT pw FROM passwort_Youtube_App WHERE user_name = %s"\r\n            cursor.execute(query, (username,))\r\n            result = cursor.fetchone()\r\n\r\n            if result:\r\n                db_password = result[0]\r\n                if db_password == password:\r\n                    \r\n                    self.master.destroy()\r\n                    self.after_login()\r\n\r\n                    #messagebox.showinfo("Automatisch eingeloggt", "Du wurdest automatisch eingeloggt")\r\n\r\n           \r\n        except:\r\n            pass\r\n\r\n    def check_login(self):\r\n\r\n        # Verbindung zur Datenbank herstellen\r\n        db = mysql.connector.connect(host="database.snbz.services", user="Nicklas-Public", password="E5$03tb@5k?vfZc#xsB", database="App_Nicklas", port="3306")\r\n        cursor = db.cursor()\r\n\r\n        # Benutzername und Passwort aus den Eingabefeldern abrufen\r\n        username = self.username_entry.get()\r\n        password = self.password_entry.get()\r\n\r\n        # SQL-Abfrage, um das Passwort für den angegebenen Benutzernamen abzurufen\r\n        query = "SELECT pw FROM passwort_Youtube_App WHERE user_name = %s"\r\n        cursor.execute(query, (username,))\r\n        result = cursor.fetchone()\r\n\r\n        if result:\r\n            db_password = result[0]\r\n            if db_password == "0":\r\n                messagebox.showerror("Error", "Please Register your Passwort first.")\r\n            elif db_password != password:\r\n                messagebox.showerror("Error", "Wrong password.")\r\n\r\n            elif db_password == password:\r\n                messagebox.showinfo("Success", "Login successful.")\r\n                with open("login.txt", "w") as f:\r\n                    f.write(self.username_entry.get())\r\n                    f.write("\\n")\r\n                    f.write(self.password_entry.get())\r\n                    f.close()\r\n                \r\n                ########################################################################### Hauptfenster\r\n                self.master.destroy()\r\n                self.after_login()\t\r\n                \r\n                \r\n                \r\n\r\n            \r\n\r\n        else:\r\n            print("Benutzer nicht gefunden.")\r\n\r\n        # Verbindung zur Datenbank schließen\r\n        db.close()\r\n\r\n\r\n    \r\n       \r\n       \r\n            \r\n\r\n    def register_info(self):\r\n        msg = "Diese Funktion ist in Arbeit!"\r\n        response = messagebox.askquestion("Info", msg, icon="info")\r\n        \r\n       \r\n\r\n\r\n    def create_images(self):\r\n        \r\n        self.login_image = tk.PhotoImage(file="images/unbenannt.png")\r\n        self.login_image_label = tk.Label(self.master, image=self.login_image)\r\n        self.login_image_label.place(x=0, y=0)\r\n\r\n        self.login_button = tk.Button(self.master, text="Login", command=self.check_login, bd=0, bg="#1068e3", fg="White", font=("Arial", 16))\r\n    \r\n        self.login_button.config(width=20, height=1)\r\n        self.login_button.place(x=330, y=320)\r\n \r\n\r\n        # show enter username entry\r\n        self.username_entry = tk.Entry(self.master, width=20, font=("Arial", 10))\r\n        self.username_entry.place(x=350, y=183)\r\n\r\n        # show enter password entry\r\n        self.password_entry = tk.Entry(self.master, width=20, font=("Arial", 10))\r\n        self.password_entry.place(x=350, y=250)\r\n\r\n\r\n        self.password_entry.config(show="*")\r\n\r\n        self.show_password = tk.Checkbutton(self.master, text="Show password", command=self.toggle_password_visibility, bg="White", fg="Black", font=("Arial", 12))\r\n        self.show_password.place(x=345, y=280)\r\n        self.show_password.deselect()\r\n\r\n        # regsiter button\r\n        self.register_button = tk.Button(self.master, text="Register", command=self.register_info, bd=0, bg="#1068e3", fg="White", font=("Arial", 16))\r\n        self.register_button.config(width=20, height=1)\r\n        self.register_button.place(x=330, y=510)\r\n\r\n\r\n\r\n    def toggle_password_visibility(self):\r\n        if self.password_entry.cget(\'show\') == \'\':\r\n            self.password_entry.config(show=\'*\')\r\n        else:\r\n            self.password_entry.config(show=\'\')\r\n        \r\n\r\n\r\n\r\n\r\n\r\n\r\n    \r\n        \r\n\r\n\r\n\r\n\r\n\r\n\r\nroot = tk.Tk()\r\napp = Application(master=root)\r\nicon = tk.PhotoImage(file="images/nutzer.png")\r\nroot.iconphoto(False, icon)\r\napp.mainloop()\r\n\r\n');
INSERT INTO Code_YoutubeDownloader VALUES ('');
